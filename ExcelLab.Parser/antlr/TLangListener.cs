//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Demian/RiderProjects/ExcelLab/ExcelLab.Parser\TLang.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="TLangParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public interface ITLangListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="TLangParser.content"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterContent([NotNull] TLangParser.ContentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TLangParser.content"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitContent([NotNull] TLangParser.ContentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>parentheses</c>
	/// labeled alternative in <see cref="TLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParentheses([NotNull] TLangParser.ParenthesesContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>parentheses</c>
	/// labeled alternative in <see cref="TLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParentheses([NotNull] TLangParser.ParenthesesContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>number</c>
	/// labeled alternative in <see cref="TLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumber([NotNull] TLangParser.NumberContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>number</c>
	/// labeled alternative in <see cref="TLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumber([NotNull] TLangParser.NumberContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>avg</c>
	/// labeled alternative in <see cref="TLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAvg([NotNull] TLangParser.AvgContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>avg</c>
	/// labeled alternative in <see cref="TLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAvg([NotNull] TLangParser.AvgContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>cmp</c>
	/// labeled alternative in <see cref="TLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCmp([NotNull] TLangParser.CmpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>cmp</c>
	/// labeled alternative in <see cref="TLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCmp([NotNull] TLangParser.CmpContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>factorial</c>
	/// labeled alternative in <see cref="TLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFactorial([NotNull] TLangParser.FactorialContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>factorial</c>
	/// labeled alternative in <see cref="TLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFactorial([NotNull] TLangParser.FactorialContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>minmax</c>
	/// labeled alternative in <see cref="TLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMinmax([NotNull] TLangParser.MinmaxContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>minmax</c>
	/// labeled alternative in <see cref="TLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMinmax([NotNull] TLangParser.MinmaxContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>addsub</c>
	/// labeled alternative in <see cref="TLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddsub([NotNull] TLangParser.AddsubContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>addsub</c>
	/// labeled alternative in <see cref="TLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddsub([NotNull] TLangParser.AddsubContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>if</c>
	/// labeled alternative in <see cref="TLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIf([NotNull] TLangParser.IfContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>if</c>
	/// labeled alternative in <see cref="TLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIf([NotNull] TLangParser.IfContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>decinc</c>
	/// labeled alternative in <see cref="TLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDecinc([NotNull] TLangParser.DecincContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>decinc</c>
	/// labeled alternative in <see cref="TLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDecinc([NotNull] TLangParser.DecincContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>muldiv</c>
	/// labeled alternative in <see cref="TLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMuldiv([NotNull] TLangParser.MuldivContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>muldiv</c>
	/// labeled alternative in <see cref="TLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMuldiv([NotNull] TLangParser.MuldivContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>exponent</c>
	/// labeled alternative in <see cref="TLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExponent([NotNull] TLangParser.ExponentContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exponent</c>
	/// labeled alternative in <see cref="TLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExponent([NotNull] TLangParser.ExponentContext context);
}
