//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Demian/RiderProjects/ExcelLab/ExcelLab.Parser\TLang.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class TLangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, SUM=6, AVG=7, MAX=8, MIN=9, IF=10, 
		CMP=11, FLOAT=12, PLUSPLUS=13, MINUSMINUS=14, PLUS=15, MINUS=16, ASTERISK=17, 
		SLASH=18, WS=19, UKNOWNCHAR=20;
	public const int
		RULE_content = 0, RULE_expression = 1;
	public static readonly string[] ruleNames = {
		"content", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "','", "')'", "'!'", "'^'", "'SUM'", "'AVG'", "'MAX'", "'MIN'", 
		"'IF'", "'CMP'", null, null, null, "'+'", "'-'", "'*'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "SUM", "AVG", "MAX", "MIN", "IF", 
		"CMP", "FLOAT", "PLUSPLUS", "MINUSMINUS", "PLUS", "MINUS", "ASTERISK", 
		"SLASH", "WS", "UKNOWNCHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TLangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TLangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TLangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TLangParser.Eof, 0); }
		public ContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_content; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITLangListener typedListener = listener as ITLangListener;
			if (typedListener != null) typedListener.EnterContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITLangListener typedListener = listener as ITLangListener;
			if (typedListener != null) typedListener.ExitContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITLangVisitor<TResult> typedVisitor = visitor as ITLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContentContext content() {
		ContentContext _localctx = new ContentContext(Context, State);
		EnterRule(_localctx, 0, RULE_content);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4;
			expression(0);
			State = 5;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesesContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesesContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITLangListener typedListener = listener as ITLangListener;
			if (typedListener != null) typedListener.EnterParentheses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITLangListener typedListener = listener as ITLangListener;
			if (typedListener != null) typedListener.ExitParentheses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITLangVisitor<TResult> typedVisitor = visitor as ITLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParentheses(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(TLangParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(TLangParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(TLangParser.MINUS, 0); }
		public NumberContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITLangListener typedListener = listener as ITLangListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITLangListener typedListener = listener as ITLangListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITLangVisitor<TResult> typedVisitor = visitor as ITLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AvgContext : ExpressionContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _exps = new List<ExpressionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG() { return GetToken(TLangParser.AVG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AvgContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITLangListener typedListener = listener as ITLangListener;
			if (typedListener != null) typedListener.EnterAvg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITLangListener typedListener = listener as ITLangListener;
			if (typedListener != null) typedListener.ExitAvg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITLangVisitor<TResult> typedVisitor = visitor as ITLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAvg(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CmpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMP() { return GetToken(TLangParser.CMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CmpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITLangListener typedListener = listener as ITLangListener;
			if (typedListener != null) typedListener.EnterCmp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITLangListener typedListener = listener as ITLangListener;
			if (typedListener != null) typedListener.ExitCmp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITLangVisitor<TResult> typedVisitor = visitor as ITLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FactorialContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FactorialContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITLangListener typedListener = listener as ITLangListener;
			if (typedListener != null) typedListener.EnterFactorial(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITLangListener typedListener = listener as ITLangListener;
			if (typedListener != null) typedListener.ExitFactorial(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITLangVisitor<TResult> typedVisitor = visitor as ITLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactorial(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MinmaxContext : ExpressionContext {
		public IToken op;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _exps = new List<ExpressionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(TLangParser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(TLangParser.MIN, 0); }
		public MinmaxContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITLangListener typedListener = listener as ITLangListener;
			if (typedListener != null) typedListener.EnterMinmax(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITLangListener typedListener = listener as ITLangListener;
			if (typedListener != null) typedListener.ExitMinmax(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITLangVisitor<TResult> typedVisitor = visitor as ITLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinmax(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddsubContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(TLangParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(TLangParser.MINUS, 0); }
		public AddsubContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITLangListener typedListener = listener as ITLangListener;
			if (typedListener != null) typedListener.EnterAddsub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITLangListener typedListener = listener as ITLangListener;
			if (typedListener != null) typedListener.ExitAddsub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITLangVisitor<TResult> typedVisitor = visitor as ITLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddsub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SumContext : ExpressionContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _exps = new List<ExpressionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM() { return GetToken(TLangParser.SUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SumContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITLangListener typedListener = listener as ITLangListener;
			if (typedListener != null) typedListener.EnterSum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITLangListener typedListener = listener as ITLangListener;
			if (typedListener != null) typedListener.ExitSum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITLangVisitor<TResult> typedVisitor = visitor as ITLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfContext : ExpressionContext {
		public ExpressionContext condition;
		public ExpressionContext ifbranch;
		public ExpressionContext elsebranch;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(TLangParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IfContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITLangListener typedListener = listener as ITLangListener;
			if (typedListener != null) typedListener.EnterIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITLangListener typedListener = listener as ITLangListener;
			if (typedListener != null) typedListener.ExitIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITLangVisitor<TResult> typedVisitor = visitor as ITLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecincContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUSPLUS() { return GetToken(TLangParser.PLUSPLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUSMINUS() { return GetToken(TLangParser.MINUSMINUS, 0); }
		public DecincContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITLangListener typedListener = listener as ITLangListener;
			if (typedListener != null) typedListener.EnterDecinc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITLangListener typedListener = listener as ITLangListener;
			if (typedListener != null) typedListener.ExitDecinc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITLangVisitor<TResult> typedVisitor = visitor as ITLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecinc(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MuldivContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK() { return GetToken(TLangParser.ASTERISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(TLangParser.SLASH, 0); }
		public MuldivContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITLangListener typedListener = listener as ITLangListener;
			if (typedListener != null) typedListener.EnterMuldiv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITLangListener typedListener = listener as ITLangListener;
			if (typedListener != null) typedListener.ExitMuldiv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITLangVisitor<TResult> typedVisitor = visitor as ITLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMuldiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExponentContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExponentContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITLangListener typedListener = listener as ITLangListener;
			if (typedListener != null) typedListener.EnterExponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITLangListener typedListener = listener as ITLangListener;
			if (typedListener != null) typedListener.ExitExponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITLangVisitor<TResult> typedVisitor = visitor as ITLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MAX:
			case MIN:
				{
				_localctx = new MinmaxContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				{
				State = 8;
				((MinmaxContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==MAX || _la==MIN) ) {
					((MinmaxContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				State = 9;
				Match(T__0);
				State = 10;
				((MinmaxContext)_localctx)._expression = expression(0);
				((MinmaxContext)_localctx)._exps.Add(((MinmaxContext)_localctx)._expression);
				State = 15;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 11;
					Match(T__1);
					State = 12;
					((MinmaxContext)_localctx)._expression = expression(0);
					((MinmaxContext)_localctx)._exps.Add(((MinmaxContext)_localctx)._expression);
					}
					}
					State = 17;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 18;
				Match(T__2);
				}
				break;
			case AVG:
				{
				_localctx = new AvgContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 20;
				Match(AVG);
				State = 21;
				Match(T__0);
				State = 22;
				((AvgContext)_localctx)._expression = expression(0);
				((AvgContext)_localctx)._exps.Add(((AvgContext)_localctx)._expression);
				State = 27;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 23;
					Match(T__1);
					State = 24;
					((AvgContext)_localctx)._expression = expression(0);
					((AvgContext)_localctx)._exps.Add(((AvgContext)_localctx)._expression);
					}
					}
					State = 29;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 30;
				Match(T__2);
				}
				break;
			case SUM:
				{
				_localctx = new SumContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 32;
				Match(SUM);
				State = 33;
				Match(T__0);
				State = 34;
				((SumContext)_localctx)._expression = expression(0);
				((SumContext)_localctx)._exps.Add(((SumContext)_localctx)._expression);
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 35;
					Match(T__1);
					State = 36;
					((SumContext)_localctx)._expression = expression(0);
					((SumContext)_localctx)._exps.Add(((SumContext)_localctx)._expression);
					}
					}
					State = 41;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 42;
				Match(T__2);
				}
				break;
			case IF:
				{
				_localctx = new IfContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 44;
				Match(IF);
				State = 45;
				Match(T__0);
				State = 46;
				((IfContext)_localctx).condition = expression(0);
				State = 47;
				Match(T__1);
				State = 48;
				((IfContext)_localctx).ifbranch = expression(0);
				State = 49;
				Match(T__1);
				State = 50;
				((IfContext)_localctx).elsebranch = expression(0);
				State = 51;
				Match(T__2);
				}
				break;
			case CMP:
				{
				_localctx = new CmpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 53;
				Match(CMP);
				State = 54;
				Match(T__0);
				State = 55;
				expression(0);
				State = 56;
				Match(T__1);
				State = 57;
				expression(0);
				State = 58;
				Match(T__2);
				}
				break;
			case PLUSPLUS:
			case MINUSMINUS:
				{
				_localctx = new DecincContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				{
				State = 60;
				((DecincContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PLUSPLUS || _la==MINUSMINUS) ) {
					((DecincContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				State = 61;
				expression(7);
				}
				break;
			case T__0:
				{
				_localctx = new ParenthesesContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 62;
				Match(T__0);
				State = 63;
				expression(0);
				State = 64;
				Match(T__2);
				}
				break;
			case FLOAT:
			case PLUS:
			case MINUS:
				{
				_localctx = new NumberContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					State = 66;
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 69;
				Match(FLOAT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 85;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 83;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						_localctx = new ExponentContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 72;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 73;
						Match(T__4);
						State = 74;
						expression(6);
						}
						break;
					case 2:
						{
						_localctx = new MuldivContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 75;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						{
						State = 76;
						((MuldivContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ASTERISK || _la==SLASH) ) {
							((MuldivContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						State = 77;
						expression(5);
						}
						break;
					case 3:
						{
						_localctx = new AddsubContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 78;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						{
						State = 79;
						((AddsubContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((AddsubContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						State = 80;
						expression(4);
						}
						break;
					case 4:
						{
						_localctx = new FactorialContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 81;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 82;
						Match(T__3);
						}
						break;
					}
					} 
				}
				State = 87;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 6);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,20,89,2,0,7,0,2,1,7,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,5,1,14,8,
		1,10,1,12,1,17,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,26,8,1,10,1,12,1,29,
		9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,38,8,1,10,1,12,1,41,9,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,3,1,68,8,1,1,1,3,1,71,8,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,5,1,84,8,1,10,1,12,1,87,9,1,1,1,0,1,2,2,0,2,0,4,1,
		0,8,9,1,0,13,14,1,0,15,16,1,0,17,18,101,0,4,1,0,0,0,2,70,1,0,0,0,4,5,3,
		2,1,0,5,6,5,0,0,1,6,1,1,0,0,0,7,8,6,1,-1,0,8,9,7,0,0,0,9,10,5,1,0,0,10,
		15,3,2,1,0,11,12,5,2,0,0,12,14,3,2,1,0,13,11,1,0,0,0,14,17,1,0,0,0,15,
		13,1,0,0,0,15,16,1,0,0,0,16,18,1,0,0,0,17,15,1,0,0,0,18,19,5,3,0,0,19,
		71,1,0,0,0,20,21,5,7,0,0,21,22,5,1,0,0,22,27,3,2,1,0,23,24,5,2,0,0,24,
		26,3,2,1,0,25,23,1,0,0,0,26,29,1,0,0,0,27,25,1,0,0,0,27,28,1,0,0,0,28,
		30,1,0,0,0,29,27,1,0,0,0,30,31,5,3,0,0,31,71,1,0,0,0,32,33,5,6,0,0,33,
		34,5,1,0,0,34,39,3,2,1,0,35,36,5,2,0,0,36,38,3,2,1,0,37,35,1,0,0,0,38,
		41,1,0,0,0,39,37,1,0,0,0,39,40,1,0,0,0,40,42,1,0,0,0,41,39,1,0,0,0,42,
		43,5,3,0,0,43,71,1,0,0,0,44,45,5,10,0,0,45,46,5,1,0,0,46,47,3,2,1,0,47,
		48,5,2,0,0,48,49,3,2,1,0,49,50,5,2,0,0,50,51,3,2,1,0,51,52,5,3,0,0,52,
		71,1,0,0,0,53,54,5,11,0,0,54,55,5,1,0,0,55,56,3,2,1,0,56,57,5,2,0,0,57,
		58,3,2,1,0,58,59,5,3,0,0,59,71,1,0,0,0,60,61,7,1,0,0,61,71,3,2,1,7,62,
		63,5,1,0,0,63,64,3,2,1,0,64,65,5,3,0,0,65,71,1,0,0,0,66,68,7,2,0,0,67,
		66,1,0,0,0,67,68,1,0,0,0,68,69,1,0,0,0,69,71,5,12,0,0,70,7,1,0,0,0,70,
		20,1,0,0,0,70,32,1,0,0,0,70,44,1,0,0,0,70,53,1,0,0,0,70,60,1,0,0,0,70,
		62,1,0,0,0,70,67,1,0,0,0,71,85,1,0,0,0,72,73,10,5,0,0,73,74,5,5,0,0,74,
		84,3,2,1,6,75,76,10,4,0,0,76,77,7,3,0,0,77,84,3,2,1,5,78,79,10,3,0,0,79,
		80,7,2,0,0,80,84,3,2,1,4,81,82,10,6,0,0,82,84,5,4,0,0,83,72,1,0,0,0,83,
		75,1,0,0,0,83,78,1,0,0,0,83,81,1,0,0,0,84,87,1,0,0,0,85,83,1,0,0,0,85,
		86,1,0,0,0,86,3,1,0,0,0,87,85,1,0,0,0,7,15,27,39,67,70,83,85
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
